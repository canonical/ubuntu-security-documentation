#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This is used to generate both (via --editmoin):
#   https://wiki.ubuntu.com/Security/Features
# and (with --historical):
#   https://wiki.ubuntu.com/Security/Features/Historical
#
# Copyright 2008-2016 Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# Copyright 2025 Canonical, Ltd.
# Author: Marek Such√°nek <marek.suchanek@canonical.com>
# License: GPLv3

import json
import optparse
import os
import sys
import tempfile

parser = optparse.OptionParser()
parser.add_option("--historical", help="Display all releases", action='store_true')
(opt, args) = parser.parse_args()

target = sys.stdout

UNIMPLEMENTED = 0
AVAILABLE = 1
DEFAULT = 2
color = { "UNIMPLEMENTED": 'dddddd', "AVAILABLE": '98fd98', "DEFAULT": '00dd00' }

# Load the releases list
with open("releases.json") as f:
    releases = json.load(f)

# Load the features list
with open("features.json") as f:
    feature_list = json.load(f)

def table_row(cells: list) -> str:
    first_cell = True
    out = ""

    for cell in cells:
        if first_cell:
            out += f"   * - {cell}\n"
            first_cell = False
        else:
            out += f"     - {cell}\n"
    
    return out

# Explain the table format
target.write('''
Matrix
------

.. list-table:: Table format
   :header-rows: 1

   * - Text format
     - Meaning
   * - **Bold**
     - By default
   * - Regular
     - Available
   * - --
     - Unimplemented
''')

target.write('''
.. list-table:: Security features in releases
   :header-rows: 1

''')

# Report release name headers
if opt.historical:
    header_releases = releases
else:
    header_releases = [r for r in releases if not r["is_eol"]]

release_names = [r["human_name"].replace("Ubuntu ", "") for r in header_releases]

table_corner = "Feature"

header = table_row([table_corner, *release_names])

target.write(header)
target.write("\n")

def cell_with_markup(cell: dict) -> str:
    if cell['state'] == "DEFAULT":
        return f"**{cell['status']}**"
    else:
        return f"{cell['status']}"

for feature in feature_list:
    if 'section' in feature:
        continue

    name = feature['name']
    short = feature['short']
    matrix = feature["matrix"]

    # The first cell in this row names the feature and links to its section
    cells = [f":ref:`{short} <{name}>`"]

    # Every feature starts as unimplemented until the first recorded change
    feature_default = {"state": "UNIMPLEMENTED", "status": "--"}
    current_development = feature_default

    for rel in releases:
        item = matrix.get(rel["code_name"])

        if item is not None:
            current_development = item

        if not opt.historical and rel["is_eol"]:
            continue
        else:
            cell = cell_with_markup(current_development)
            cells.append(cell)
    
    target.write(table_row(cells))
    target.write('\n')

target.flush()

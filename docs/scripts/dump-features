#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This is used to generate both (via --editmoin):
#   https://wiki.ubuntu.com/Security/Features
# and (with --historical):
#   https://wiki.ubuntu.com/Security/Features/Historical
#
# Copyright 2008-2016 Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# License: GPLv3
from __future__ import print_function

import json
import optparse
import os
import sys
import tempfile

parser = optparse.OptionParser()
parser.add_option("--historical", help="Display all releases", action='store_true')
parser.add_option("--editmoin", help="Actually do the update using editmoin", action='store_true')
parser.add_option("--edit", help="Edit the generated output before handing it to editmoin", action='store_true')
(opt, args) = parser.parse_args()

target = sys.stdout

def check_editmoin():
    # Make sure editmoin would actually work
    if not os.path.exists(os.path.expanduser('~/.moin_ids')) and not os.path.exists(os.path.expanduser('~/.moin_users')):
        print("Error: Need to configure editmoin to use this option (usually ~/.moin_ids).\n", file=sys.stderr)
        return False

    return True

if opt.editmoin:
    if check_editmoin():
        target = tempfile.NamedTemporaryFile(mode="w", prefix='dump-features-', suffix='.txt')
    else:
        sys.exit(1)

UNIMPLEMENTED = 0
AVAILABLE = 1
DEFAULT = 2
color = { "UNIMPLEMENTED": 'dddddd', "AVAILABLE": '98fd98', "DEFAULT": '00dd00' }

# Load the releases list
with open("releases.json") as f:
    releases = json.load(f)

# Load the features list
with open("features.json") as f:
    feature_list = json.load(f)


target.write('''
## This page was auto-generated using https://git.launchpad.net/ubuntu-cve-tracker/tree/scripts/dump-features
<<Include(SecurityTeam/Header)>>

= Matrix =
||<#00dd00> '\''By Default'\'' ||
||<#98fd98> '\''Available'\'' ||
||<#dddddd> '\''Unimplemented'\'' ||

|| '\''feature'\''              ||''')

# Report release name headers
for rel in releases:
    if not opt.historical and rel["is_eol"]:
        continue
    name = rel["human_name"]
    name = name.replace('Ubuntu ', "'\''").replace(' (', "'\'' (")
    target.write('%-20s\'\'\' ||' % (name))
target.write("\n")

for feature in feature_list:
    if 'section' in feature:
        continue

    name = feature['name']
    short = feature['short']
    matrix = feature["matrix"]

    target.write('|| [[#%s|%20s]] ||' % (name, short))

    feature_default = {"state": "UNIMPLEMENTED", "status": "--"}
    current_development = feature_default

    for rel in releases:
        item = matrix.get(rel["code_name"])

        if item is not None:
            current_development = item

        if not opt.historical and rel["is_eol"]:
            continue
        else:
            target.write('<#%s> %-20s ||' % (color[current_development['state']], current_development['status']))
    target.write('\n')

target.write('''
||<tablestyle="float:right; font-size: 0.9em; width:30%; background:#F1F1ED; background-repeat: no-repeat; background-position:  98% 0.5ex; margin: 0 0 1em 1em; padding: 0.5em;"><<TableOfContents>>||

''')

target.flush()

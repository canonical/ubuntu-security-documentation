#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2008-2016 Canonical, Ltd.
# Author: Kees Cook <kees@ubuntu.com>
# Copyright 2025 Canonical, Ltd.
# Author: Marek Such√°nek <marek.suchanek@canonical.com>
# License: GPLv3

import argparse
from enum import Enum
from io import TextIOWrapper
import json
import sys

def eprint(*args, **kwargs):
    """
    Print to stderr
    """
    print(*args, file=sys.stderr, **kwargs)

try:
    from pydantic import BaseModel, Field, ValidationError
except ModuleNotFoundError:
    eprint("Please install the Pydantic Python library.")
    eprint("On Ubuntu and Debian:")
    eprint("$ sudo apt install python3-pydantic")
    sys.exit(1)

NAME = 'dump-features'
DESCRIPTION = '''
This program generates a table with ReStructuredText markup that lists
Ubuntu security features and their status in various Ubuntu releases.
'''

def args_from_cli() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
                    prog=NAME,
                    description=DESCRIPTION)

    parser.add_argument(
        '-H',
        '--historical',
        help="Display all releases, including EOL",
        action='store_true')
    parser.add_argument(
        '-o',
        '--output',
        help="Write the table to this file; otherwise, print to stdout",
        nargs='?',
        type=argparse.FileType('w'),
        default=sys.stdout)
    parser.add_argument(
        '-r',
        '--releases',
        help="Read release data from this file; by default releases.json",
        nargs='?',
        type=argparse.FileType('r'),
        default="releases.json")
    parser.add_argument(
        '-f',
        '--features',
        help="Read feature data from this file; by default features.json",
        nargs='?',
        type=argparse.FileType('r'),
        default="features.json")

    return parser.parse_args()

class State(Enum):
    UNIMPLEMENTED = "UNIMPLEMENTED"
    AVAILABLE = "AVAILABLE"
    DEFAULT = "DEFAULT"

class Release(BaseModel):
    """
    This is an Ubuntu release as described in releases.json
    """
    code_name: str
    human_name: str
    is_eol: bool

    def only_version(self) -> str:
        """
        Take only the version number from the release name.
        For example:
        Ubuntu 24.04 LTS -> 24.04 LTS
        """
        return self.human_name.replace("Ubuntu ", "")

def load_releases(file: TextIOWrapper) -> list[Release]:
    """
    Load the releases list
    """
    raw_releases = json.load(file)

    try:
        releases = [Release(**r) for r in raw_releases]
        return releases
    except ValidationError as e:
        eprint(e)
        sys.exit(1)

class Implementation(BaseModel):
    """
    This is the status of the implementation of a security feature
    in a given Ubuntu release as listed in features.json
    """
    comment: str
    state: State

    def initial():
        """"
        The initial state of an implementation is unimplemented
        """
        return Implementation(comment="--", state=State.UNIMPLEMENTED)

class Feature(BaseModel):
    """
    This is a security feature as listed in features.json
    """
    name: str
    section: bool = Field(default=False)
    changes: dict[str, Implementation] = Field(default={})

def load_features(file: TextIOWrapper) -> list[Feature]:
    """
    Load the features list
    """
    raw_features = json.load(file)
    feature_to_section = section_mapping(raw_features)

    try:
        features = [Feature(**f) for f in raw_features]
        return features, feature_to_section
    except ValidationError as e:
        eprint(e)
        sys.exit(1)

def table_row(cells: list[str]) -> str:
    """
    Format a list of cells as an RST list table row
    """
    first_cell = True
    out = ""

    for cell in cells:
        if first_cell:
            out += f"   * - {cell}\n"
            first_cell = False
        else:
            out += f"     - {cell}\n"

    return out

INITIAL_HEADER = '''
Overview of security features
##############################

This page provides a high-level overview of the security features in Ubuntu, their default configurations and rationale for having them enabled or disabled.

.. list-table:: Security features in releases
   :header-rows: 1

'''

def page_header():
    """
    Draw the complete page header before the features table:
    * The main heading
    * The small table explaining the format
    * The header of the following features table
    """
    # Explain the table format
    args.output.write(INITIAL_HEADER)

    # Report release name headers
    if args.historical:
        header_releases = releases
    else:
        header_releases = [r for r in releases if not r.is_eol]

    release_names = [r.only_version() for r in reversed(header_releases)]

    # Header row: section name, feature name, release columns
    header = table_row(["Section", "Feature", *release_names])

    args.output.write(header)
    args.output.write("\n")

def page_footer():
    footer = """
Additional Documentation
========================

- `Coordination with Debian <https://wiki.debian.org/Hardening>`_
- `Gentoo's Hardening project <https://www.gentoo.org/proj/en/hardened/hardened-toolchain.xml>`_
- `Ubuntu Security Features for all releases <https://wiki.ubuntu.com/Security/Features>`_
"""
    args.output.write(footer)

# Commenting out as for now we don't use makrup to convey information. TO-DO: figure out how to convey different states.
#def cell_with_markup(cell: Implementation) -> str:
#    """
#    Format the cell content as an RST string
#    """
#    # Default features add special markup, currently bold:
#    if cell.state == State.DEFAULT:
#        return f"**{cell.comment}**"
#    else:
#        return f"{cell.comment}"

def feature_row(feature: Feature, feature_to_section):
    """
    Draw a row describing a security feature in the RST list table format.
    Adds section name as the first cell.
    """
    # Look up the section name from the mapping (if it exists)
    section_info = feature_to_section.get(feature.name, {})
    if section_info:
        section_cell = f":ref:`{section_info['name']}`"
    else:
        section_cell = ""

    # Create feature name cell with name
    feature_cell = f":ref:`{feature.name}`"

    # First two cells in the row: section name, then feature name
    cells = [section_cell, feature_cell]


    # Every feature starts as unimplemented until the first recorded change
    current_development = Implementation.initial()

    for rel in releases:
        item = feature.changes.get(rel.code_name)

        if item is not None:
            current_development = item

        if not args.historical and rel.is_eol:
            continue
        else:
            cells.append(current_development.comment)

    args.output.write(table_row(cells))
    args.output.write('\n')

def section_mapping(raw_features):

    feature_to_section = {}
    current_section_name = None
    
    for f in raw_features:
        if "section" in f:
            current_section_name = f["name"]
        elif "name" in f:
            feature_to_section[f["name"]] = {
                "name": current_section_name,
            }

    return feature_to_section

if __name__ == "__main__":
    args = args_from_cli()

    releases = load_releases(args.releases)

    features, feature_to_section = load_features(args.features)

    page_header()

    for feature in features:
        if not feature.section:
            feature_row(feature, feature_to_section)
    
    page_footer()

    args.output.flush()
